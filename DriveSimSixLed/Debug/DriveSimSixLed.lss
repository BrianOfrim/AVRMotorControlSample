
DriveSimSixLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000642  000006d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010e  0080010e  000006e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b92  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000946  00000000  00000000  00001356  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f1  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000494  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000194  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e4       	ldi	r30, 0x42	; 66
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 93 00 	call	0x126	; 0x126 <main>
  9e:	0c 94 1f 03 	jmp	0x63e	; 0x63e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:

void wait() {
	uint8_t i;
	for(i=0;i<20;i++)
	_delay_loop_2(0);
}
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  b2:	08 95       	ret

000000b4 <read_adc>:
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	90 83       	st	Z, r25
  be:	90 81       	ld	r25, Z
  c0:	89 2b       	or	r24, r25
  c2:	80 83       	st	Z, r24
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	80 83       	st	Z, r24
  ce:	80 81       	ld	r24, Z
  d0:	86 fd       	sbrc	r24, 6
  d2:	fd cf       	rjmp	.-6      	; 0xce <read_adc+0x1a>
  d4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  dc:	08 95       	ret

000000de <pwm_init>:

void pwm_init() {
	// Timer 0
	//=============================================
	// set none-inverting mode
	TCCR0A |= _BV(COM0A1);
  de:	84 b5       	in	r24, 0x24	; 36
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	84 bd       	out	0x24, r24	; 36
	// set PWN Phase Corrected
	TCCR0A |= _BV(WGM00);
  e4:	84 b5       	in	r24, 0x24	; 36
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	84 bd       	out	0x24, r24	; 36
	// set pre-scaler to 8 and starts PWM
	TCCR0B |= _BV(CS01);
  ea:	85 b5       	in	r24, 0x25	; 37
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	85 bd       	out	0x25, r24	; 37
	//=============================================
	
	//Timer 1
	//=============================================
	 // set none-inverting mode
	 TCCR1A |= _BV(COM1A1) | _BV(COM1B1);
  f0:	e0 e8       	ldi	r30, 0x80	; 128
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 6a       	ori	r24, 0xA0	; 160
  f8:	80 83       	st	Z, r24
	// set PWN Phase Corrected
	 TCCR1A |= _BV(WGM10);
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	80 83       	st	Z, r24
	// set pre-scaler to 8 and starts PWM
	 TCCR1B |= _BV(CS11);
 100:	e1 e8       	ldi	r30, 0x81	; 129
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 83       	st	Z, r24
	 //=============================================
	
	//Time 2
	//=============================================
	// set none-inverting mode
	TCCR2A |= _BV(COM2A1);
 10a:	e0 eb       	ldi	r30, 0xB0	; 176
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 68       	ori	r24, 0x80	; 128
 112:	80 83       	st	Z, r24
	// set fast PWM Mode
	TCCR2A |= _BV(WGM20);
 114:	80 81       	ld	r24, Z
 116:	81 60       	ori	r24, 0x01	; 1
 118:	80 83       	st	Z, r24
	// set prescaler to 8 and starts PWM
	TCCR2B |= _BV(CS21);
 11a:	e1 eb       	ldi	r30, 0xB1	; 177
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	82 60       	ori	r24, 0x02	; 2
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <main>:
	float angle;
	int left_mag;
	int right_mag;

	//Initialize
	stdout = &uart_output;
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x3>
 12e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end+0x2>
	uart_init();
 132:	0e 94 37 01 	call	0x26e	; 0x26e <uart_init>
	adc_init();
 136:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	pwm_init();
 13a:	0e 94 6f 00 	call	0xde	; 0xde <pwm_init>
	fflush(stdout);
	
	
	// Set pin 6 to be digital output
	DDRB = _BV(DDB3) | _BV(DDB2) | _BV(DDB1); // pin 11 (bottom L), pin 10 (middle R), pin 9 (middle L)
 13e:	8e e0       	ldi	r24, 0x0E	; 14
 140:	84 b9       	out	0x04, r24	; 4
	PORTB |= _BV(PORTB3) | _BV(PORTB2) | _BV(PORTB1); 
 142:	85 b1       	in	r24, 0x05	; 5
 144:	8e 60       	ori	r24, 0x0E	; 14
 146:	85 b9       	out	0x05, r24	; 5
	DDRD = _BV(DDD6) | _BV(DDD5) | _BV(DDD3) | _BV(DDD2); // pin 6 (top L), pin 5 (top R), pin 3 (bottom R), pin 2 (dir)
 148:	8c e6       	ldi	r24, 0x6C	; 108
 14a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= _BV(PORTD6) | _BV(PORTD5) | _BV(PORTD3) | _BV(PORTD2);
 14c:	8b b1       	in	r24, 0x0b	; 11
 14e:	8c 66       	ori	r24, 0x6C	; 108
 150:	8b b9       	out	0x0b, r24	; 11
		}
		
		// Left side
		left_mag = abs((int)((magnitude - 0.5) * angle * 512));
		OCR0A = left_mag;
		OCR1A = left_mag;
 152:	0f 2e       	mov	r0, r31
 154:	f8 e8       	ldi	r31, 0x88	; 136
 156:	cf 2e       	mov	r12, r31
 158:	d1 2c       	mov	r13, r1
 15a:	f0 2d       	mov	r31, r0
		OCR2A = left_mag;
 15c:	0f 2e       	mov	r0, r31
 15e:	f3 eb       	ldi	r31, 0xB3	; 179
 160:	ef 2e       	mov	r14, r31
 162:	f1 2c       	mov	r15, r1
 164:	f0 2d       	mov	r31, r0
		// Right Side 
		right_mag = abs((int)((magnitude - 0.5) * (1 - angle) * 512));
		OCR0B = right_mag;
		OCR1B = right_mag;
 166:	0a e8       	ldi	r16, 0x8A	; 138
 168:	10 e0       	ldi	r17, 0x00	; 0
		OCR2B = right_mag;
 16a:	0f 2e       	mov	r0, r31
 16c:	f4 eb       	ldi	r31, 0xB4	; 180
 16e:	2f 2e       	mov	r2, r31
 170:	31 2c       	mov	r3, r1
 172:	f0 2d       	mov	r31, r0
	DDRD = _BV(DDD6) | _BV(DDD5) | _BV(DDD3) | _BV(DDD2); // pin 6 (top L), pin 5 (top R), pin 3 (bottom R), pin 2 (dir)
	PORTD |= _BV(PORTD6) | _BV(PORTD5) | _BV(PORTD3) | _BV(PORTD2);
	
	
	while(1) {
		adc_result_horiz = read_adc(HORIZ_PIN); 
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_adc>
 17a:	ec 01       	movw	r28, r24
		adc_result_vert = read_adc(VERT_PIN);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 5a 00 	call	0xb4	; 0xb4 <read_adc>
		//printf("HORIZ, VERT: %i, %i\n", adc_result_horiz, adc_result_vert);
		
		angle = (float)adc_result_vert/ANALOG_STICK_MAX;
 182:	bc 01       	movw	r22, r24
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__floatunsisf>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	5a e3       	ldi	r21, 0x3A	; 58
 194:	0e 94 8e 02 	call	0x51c	; 0x51c <__mulsf3>
 198:	4b 01       	movw	r8, r22
 19a:	5c 01       	movw	r10, r24
		magnitude = (float)adc_result_horiz/ANALOG_STICK_MAX;
 19c:	be 01       	movw	r22, r28
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__floatunsisf>
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	40 e8       	ldi	r20, 0x80	; 128
 1ac:	5a e3       	ldi	r21, 0x3A	; 58
 1ae:	0e 94 8e 02 	call	0x51c	; 0x51c <__mulsf3>
 1b2:	2b 01       	movw	r4, r22
 1b4:	3c 01       	movw	r6, r24
		
		// determine direction
		//printf("Magnitude: %i\n", (int)(magnitude*1000));
		if(magnitude > 0.5){
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	5f e3       	ldi	r21, 0x3F	; 63
 1be:	0e 94 89 02 	call	0x512	; 0x512 <__gesf2>
 1c2:	18 16       	cp	r1, r24
 1c4:	14 f4       	brge	.+4      	; 0x1ca <main+0xa4>
			PORTD &= ~(_BV(PORTD2));
 1c6:	5a 98       	cbi	0x0b, 2	; 11
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <main+0xa6>
		}
		else{  
 			PORTD |= _BV(PORTD2);
 1ca:	5a 9a       	sbi	0x0b, 2	; 11
		}
		
		// Left side
		left_mag = abs((int)((magnitude - 0.5) * angle * 512));
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	5f e3       	ldi	r21, 0x3F	; 63
 1d4:	c3 01       	movw	r24, r6
 1d6:	b2 01       	movw	r22, r4
 1d8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__subsf3>
 1dc:	2b 01       	movw	r4, r22
 1de:	3c 01       	movw	r6, r24
 1e0:	9b 01       	movw	r18, r22
 1e2:	ac 01       	movw	r20, r24
 1e4:	c5 01       	movw	r24, r10
 1e6:	b4 01       	movw	r22, r8
 1e8:	0e 94 8e 02 	call	0x51c	; 0x51c <__mulsf3>
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	54 e4       	ldi	r21, 0x44	; 68
 1f4:	0e 94 8e 02 	call	0x51c	; 0x51c <__mulsf3>
 1f8:	0e 94 c5 01 	call	0x38a	; 0x38a <__fixsfsi>
 1fc:	ab 01       	movw	r20, r22
 1fe:	77 23       	and	r23, r23
 200:	24 f4       	brge	.+8      	; 0x20a <main+0xe4>
 202:	44 27       	eor	r20, r20
 204:	55 27       	eor	r21, r21
 206:	46 1b       	sub	r20, r22
 208:	57 0b       	sbc	r21, r23
		OCR0A = left_mag;
 20a:	47 bd       	out	0x27, r20	; 39
		OCR1A = left_mag;
 20c:	24 2f       	mov	r18, r20
 20e:	35 2f       	mov	r19, r21
 210:	f6 01       	movw	r30, r12
 212:	31 83       	std	Z+1, r19	; 0x01
 214:	20 83       	st	Z, r18
		OCR2A = left_mag;
 216:	f7 01       	movw	r30, r14
 218:	40 83       	st	Z, r20
		// Right Side 
		right_mag = abs((int)((magnitude - 0.5) * (1 - angle) * 512));
 21a:	a5 01       	movw	r20, r10
 21c:	94 01       	movw	r18, r8
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	80 e8       	ldi	r24, 0x80	; 128
 224:	9f e3       	ldi	r25, 0x3F	; 63
 226:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__subsf3>
 22a:	a3 01       	movw	r20, r6
 22c:	92 01       	movw	r18, r4
 22e:	0e 94 8e 02 	call	0x51c	; 0x51c <__mulsf3>
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	54 e4       	ldi	r21, 0x44	; 68
 23a:	0e 94 8e 02 	call	0x51c	; 0x51c <__mulsf3>
 23e:	0e 94 c5 01 	call	0x38a	; 0x38a <__fixsfsi>
 242:	ab 01       	movw	r20, r22
 244:	77 23       	and	r23, r23
 246:	24 f4       	brge	.+8      	; 0x250 <main+0x12a>
 248:	44 27       	eor	r20, r20
 24a:	55 27       	eor	r21, r21
 24c:	46 1b       	sub	r20, r22
 24e:	57 0b       	sbc	r21, r23
		OCR0B = right_mag;
 250:	48 bd       	out	0x28, r20	; 40
		OCR1B = right_mag;
 252:	24 2f       	mov	r18, r20
 254:	35 2f       	mov	r19, r21
 256:	f8 01       	movw	r30, r16
 258:	31 83       	std	Z+1, r19	; 0x01
 25a:	20 83       	st	Z, r18
		OCR2B = right_mag;
 25c:	f1 01       	movw	r30, r2
 25e:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	8f e3       	ldi	r24, 0x3F	; 63
 262:	9c e9       	ldi	r25, 0x9C	; 156
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x13e>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x144>
 26a:	00 00       	nop
 26c:	83 cf       	rjmp	.-250    	; 0x174 <main+0x4e>

0000026e <uart_init>:
#include <util/setbaud.h>

/* http://www.cs.mun.ca/~rod/Winter2007/4723/notes/serial/serial.html */

void uart_init() {
	UBRR0H = UBRRH_VALUE;
 26e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 272:	87 e6       	ldi	r24, 0x67	; 103
 274:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 278:	e0 ec       	ldi	r30, 0xC0	; 192
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	8d 7f       	andi	r24, 0xFD	; 253
 280:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 288:	88 e1       	ldi	r24, 0x18	; 24
 28a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 28e:	08 95       	ret

00000290 <uart_putchar>:
}

void uart_putchar(char c, FILE *stream) {
 290:	cf 93       	push	r28
 292:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 294:	8a 30       	cpi	r24, 0x0A	; 10
 296:	19 f4       	brne	.+6      	; 0x29e <uart_putchar+0xe>
		uart_putchar('\r', stream);
 298:	8d e0       	ldi	r24, 0x0D	; 13
 29a:	0e 94 48 01 	call	0x290	; 0x290 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 29e:	e0 ec       	ldi	r30, 0xC0	; 192
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	85 ff       	sbrs	r24, 5
 2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <uart_putchar+0x12>
	UDR0 = c;
 2a8:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <__subsf3>:
 2b0:	50 58       	subi	r21, 0x80	; 128

000002b2 <__addsf3>:
 2b2:	bb 27       	eor	r27, r27
 2b4:	aa 27       	eor	r26, r26
 2b6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__addsf3x>
 2ba:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__fp_round>
 2be:	0e 94 41 02 	call	0x482	; 0x482 <__fp_pscA>
 2c2:	38 f0       	brcs	.+14     	; 0x2d2 <__addsf3+0x20>
 2c4:	0e 94 48 02 	call	0x490	; 0x490 <__fp_pscB>
 2c8:	20 f0       	brcs	.+8      	; 0x2d2 <__addsf3+0x20>
 2ca:	39 f4       	brne	.+14     	; 0x2da <__addsf3+0x28>
 2cc:	9f 3f       	cpi	r25, 0xFF	; 255
 2ce:	19 f4       	brne	.+6      	; 0x2d6 <__addsf3+0x24>
 2d0:	26 f4       	brtc	.+8      	; 0x2da <__addsf3+0x28>
 2d2:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__fp_nan>
 2d6:	0e f4       	brtc	.+2      	; 0x2da <__addsf3+0x28>
 2d8:	e0 95       	com	r30
 2da:	e7 fb       	bst	r30, 7
 2dc:	0c 94 38 02 	jmp	0x470	; 0x470 <__fp_inf>

000002e0 <__addsf3x>:
 2e0:	e9 2f       	mov	r30, r25
 2e2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__fp_split3>
 2e6:	58 f3       	brcs	.-42     	; 0x2be <__addsf3+0xc>
 2e8:	ba 17       	cp	r27, r26
 2ea:	62 07       	cpc	r22, r18
 2ec:	73 07       	cpc	r23, r19
 2ee:	84 07       	cpc	r24, r20
 2f0:	95 07       	cpc	r25, r21
 2f2:	20 f0       	brcs	.+8      	; 0x2fc <__addsf3x+0x1c>
 2f4:	79 f4       	brne	.+30     	; 0x314 <__addsf3x+0x34>
 2f6:	a6 f5       	brtc	.+104    	; 0x360 <__addsf3x+0x80>
 2f8:	0c 94 82 02 	jmp	0x504	; 0x504 <__fp_zero>
 2fc:	0e f4       	brtc	.+2      	; 0x300 <__addsf3x+0x20>
 2fe:	e0 95       	com	r30
 300:	0b 2e       	mov	r0, r27
 302:	ba 2f       	mov	r27, r26
 304:	a0 2d       	mov	r26, r0
 306:	0b 01       	movw	r0, r22
 308:	b9 01       	movw	r22, r18
 30a:	90 01       	movw	r18, r0
 30c:	0c 01       	movw	r0, r24
 30e:	ca 01       	movw	r24, r20
 310:	a0 01       	movw	r20, r0
 312:	11 24       	eor	r1, r1
 314:	ff 27       	eor	r31, r31
 316:	59 1b       	sub	r21, r25
 318:	99 f0       	breq	.+38     	; 0x340 <__addsf3x+0x60>
 31a:	59 3f       	cpi	r21, 0xF9	; 249
 31c:	50 f4       	brcc	.+20     	; 0x332 <__addsf3x+0x52>
 31e:	50 3e       	cpi	r21, 0xE0	; 224
 320:	68 f1       	brcs	.+90     	; 0x37c <__addsf3x+0x9c>
 322:	1a 16       	cp	r1, r26
 324:	f0 40       	sbci	r31, 0x00	; 0
 326:	a2 2f       	mov	r26, r18
 328:	23 2f       	mov	r18, r19
 32a:	34 2f       	mov	r19, r20
 32c:	44 27       	eor	r20, r20
 32e:	58 5f       	subi	r21, 0xF8	; 248
 330:	f3 cf       	rjmp	.-26     	; 0x318 <__addsf3x+0x38>
 332:	46 95       	lsr	r20
 334:	37 95       	ror	r19
 336:	27 95       	ror	r18
 338:	a7 95       	ror	r26
 33a:	f0 40       	sbci	r31, 0x00	; 0
 33c:	53 95       	inc	r21
 33e:	c9 f7       	brne	.-14     	; 0x332 <__addsf3x+0x52>
 340:	7e f4       	brtc	.+30     	; 0x360 <__addsf3x+0x80>
 342:	1f 16       	cp	r1, r31
 344:	ba 0b       	sbc	r27, r26
 346:	62 0b       	sbc	r22, r18
 348:	73 0b       	sbc	r23, r19
 34a:	84 0b       	sbc	r24, r20
 34c:	ba f0       	brmi	.+46     	; 0x37c <__addsf3x+0x9c>
 34e:	91 50       	subi	r25, 0x01	; 1
 350:	a1 f0       	breq	.+40     	; 0x37a <__addsf3x+0x9a>
 352:	ff 0f       	add	r31, r31
 354:	bb 1f       	adc	r27, r27
 356:	66 1f       	adc	r22, r22
 358:	77 1f       	adc	r23, r23
 35a:	88 1f       	adc	r24, r24
 35c:	c2 f7       	brpl	.-16     	; 0x34e <__addsf3x+0x6e>
 35e:	0e c0       	rjmp	.+28     	; 0x37c <__addsf3x+0x9c>
 360:	ba 0f       	add	r27, r26
 362:	62 1f       	adc	r22, r18
 364:	73 1f       	adc	r23, r19
 366:	84 1f       	adc	r24, r20
 368:	48 f4       	brcc	.+18     	; 0x37c <__addsf3x+0x9c>
 36a:	87 95       	ror	r24
 36c:	77 95       	ror	r23
 36e:	67 95       	ror	r22
 370:	b7 95       	ror	r27
 372:	f7 95       	ror	r31
 374:	9e 3f       	cpi	r25, 0xFE	; 254
 376:	08 f0       	brcs	.+2      	; 0x37a <__addsf3x+0x9a>
 378:	b0 cf       	rjmp	.-160    	; 0x2da <__addsf3+0x28>
 37a:	93 95       	inc	r25
 37c:	88 0f       	add	r24, r24
 37e:	08 f0       	brcs	.+2      	; 0x382 <__addsf3x+0xa2>
 380:	99 27       	eor	r25, r25
 382:	ee 0f       	add	r30, r30
 384:	97 95       	ror	r25
 386:	87 95       	ror	r24
 388:	08 95       	ret

0000038a <__fixsfsi>:
 38a:	0e 94 cc 01 	call	0x398	; 0x398 <__fixunssfsi>
 38e:	68 94       	set
 390:	b1 11       	cpse	r27, r1
 392:	0c 94 83 02 	jmp	0x506	; 0x506 <__fp_szero>
 396:	08 95       	ret

00000398 <__fixunssfsi>:
 398:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__fp_splitA>
 39c:	88 f0       	brcs	.+34     	; 0x3c0 <__fixunssfsi+0x28>
 39e:	9f 57       	subi	r25, 0x7F	; 127
 3a0:	98 f0       	brcs	.+38     	; 0x3c8 <__fixunssfsi+0x30>
 3a2:	b9 2f       	mov	r27, r25
 3a4:	99 27       	eor	r25, r25
 3a6:	b7 51       	subi	r27, 0x17	; 23
 3a8:	b0 f0       	brcs	.+44     	; 0x3d6 <__fixunssfsi+0x3e>
 3aa:	e1 f0       	breq	.+56     	; 0x3e4 <__fixunssfsi+0x4c>
 3ac:	66 0f       	add	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	88 1f       	adc	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	1a f0       	brmi	.+6      	; 0x3bc <__fixunssfsi+0x24>
 3b6:	ba 95       	dec	r27
 3b8:	c9 f7       	brne	.-14     	; 0x3ac <__fixunssfsi+0x14>
 3ba:	14 c0       	rjmp	.+40     	; 0x3e4 <__fixunssfsi+0x4c>
 3bc:	b1 30       	cpi	r27, 0x01	; 1
 3be:	91 f0       	breq	.+36     	; 0x3e4 <__fixunssfsi+0x4c>
 3c0:	0e 94 82 02 	call	0x504	; 0x504 <__fp_zero>
 3c4:	b1 e0       	ldi	r27, 0x01	; 1
 3c6:	08 95       	ret
 3c8:	0c 94 82 02 	jmp	0x504	; 0x504 <__fp_zero>
 3cc:	67 2f       	mov	r22, r23
 3ce:	78 2f       	mov	r23, r24
 3d0:	88 27       	eor	r24, r24
 3d2:	b8 5f       	subi	r27, 0xF8	; 248
 3d4:	39 f0       	breq	.+14     	; 0x3e4 <__fixunssfsi+0x4c>
 3d6:	b9 3f       	cpi	r27, 0xF9	; 249
 3d8:	cc f3       	brlt	.-14     	; 0x3cc <__fixunssfsi+0x34>
 3da:	86 95       	lsr	r24
 3dc:	77 95       	ror	r23
 3de:	67 95       	ror	r22
 3e0:	b3 95       	inc	r27
 3e2:	d9 f7       	brne	.-10     	; 0x3da <__fixunssfsi+0x42>
 3e4:	3e f4       	brtc	.+14     	; 0x3f4 <__fixunssfsi+0x5c>
 3e6:	90 95       	com	r25
 3e8:	80 95       	com	r24
 3ea:	70 95       	com	r23
 3ec:	61 95       	neg	r22
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	8f 4f       	sbci	r24, 0xFF	; 255
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	08 95       	ret

000003f6 <__floatunsisf>:
 3f6:	e8 94       	clt
 3f8:	09 c0       	rjmp	.+18     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

000003fa <__floatsisf>:
 3fa:	97 fb       	bst	r25, 7
 3fc:	3e f4       	brtc	.+14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fe:	90 95       	com	r25
 400:	80 95       	com	r24
 402:	70 95       	com	r23
 404:	61 95       	neg	r22
 406:	7f 4f       	sbci	r23, 0xFF	; 255
 408:	8f 4f       	sbci	r24, 0xFF	; 255
 40a:	9f 4f       	sbci	r25, 0xFF	; 255
 40c:	99 23       	and	r25, r25
 40e:	a9 f0       	breq	.+42     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 410:	f9 2f       	mov	r31, r25
 412:	96 e9       	ldi	r25, 0x96	; 150
 414:	bb 27       	eor	r27, r27
 416:	93 95       	inc	r25
 418:	f6 95       	lsr	r31
 41a:	87 95       	ror	r24
 41c:	77 95       	ror	r23
 41e:	67 95       	ror	r22
 420:	b7 95       	ror	r27
 422:	f1 11       	cpse	r31, r1
 424:	f8 cf       	rjmp	.-16     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 426:	fa f4       	brpl	.+62     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 428:	bb 0f       	add	r27, r27
 42a:	11 f4       	brne	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	60 ff       	sbrs	r22, 0
 42e:	1b c0       	rjmp	.+54     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 430:	6f 5f       	subi	r22, 0xFF	; 255
 432:	7f 4f       	sbci	r23, 0xFF	; 255
 434:	8f 4f       	sbci	r24, 0xFF	; 255
 436:	9f 4f       	sbci	r25, 0xFF	; 255
 438:	16 c0       	rjmp	.+44     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 43a:	88 23       	and	r24, r24
 43c:	11 f0       	breq	.+4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 43e:	96 e9       	ldi	r25, 0x96	; 150
 440:	11 c0       	rjmp	.+34     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 442:	77 23       	and	r23, r23
 444:	21 f0       	breq	.+8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 446:	9e e8       	ldi	r25, 0x8E	; 142
 448:	87 2f       	mov	r24, r23
 44a:	76 2f       	mov	r23, r22
 44c:	05 c0       	rjmp	.+10     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 44e:	66 23       	and	r22, r22
 450:	71 f0       	breq	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 452:	96 e8       	ldi	r25, 0x86	; 134
 454:	86 2f       	mov	r24, r22
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	2a f0       	brmi	.+10     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45c:	9a 95       	dec	r25
 45e:	66 0f       	add	r22, r22
 460:	77 1f       	adc	r23, r23
 462:	88 1f       	adc	r24, r24
 464:	da f7       	brpl	.-10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 466:	88 0f       	add	r24, r24
 468:	96 95       	lsr	r25
 46a:	87 95       	ror	r24
 46c:	97 f9       	bld	r25, 7
 46e:	08 95       	ret

00000470 <__fp_inf>:
 470:	97 f9       	bld	r25, 7
 472:	9f 67       	ori	r25, 0x7F	; 127
 474:	80 e8       	ldi	r24, 0x80	; 128
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	08 95       	ret

0000047c <__fp_nan>:
 47c:	9f ef       	ldi	r25, 0xFF	; 255
 47e:	80 ec       	ldi	r24, 0xC0	; 192
 480:	08 95       	ret

00000482 <__fp_pscA>:
 482:	00 24       	eor	r0, r0
 484:	0a 94       	dec	r0
 486:	16 16       	cp	r1, r22
 488:	17 06       	cpc	r1, r23
 48a:	18 06       	cpc	r1, r24
 48c:	09 06       	cpc	r0, r25
 48e:	08 95       	ret

00000490 <__fp_pscB>:
 490:	00 24       	eor	r0, r0
 492:	0a 94       	dec	r0
 494:	12 16       	cp	r1, r18
 496:	13 06       	cpc	r1, r19
 498:	14 06       	cpc	r1, r20
 49a:	05 06       	cpc	r0, r21
 49c:	08 95       	ret

0000049e <__fp_round>:
 49e:	09 2e       	mov	r0, r25
 4a0:	03 94       	inc	r0
 4a2:	00 0c       	add	r0, r0
 4a4:	11 f4       	brne	.+4      	; 0x4aa <__fp_round+0xc>
 4a6:	88 23       	and	r24, r24
 4a8:	52 f0       	brmi	.+20     	; 0x4be <__fp_round+0x20>
 4aa:	bb 0f       	add	r27, r27
 4ac:	40 f4       	brcc	.+16     	; 0x4be <__fp_round+0x20>
 4ae:	bf 2b       	or	r27, r31
 4b0:	11 f4       	brne	.+4      	; 0x4b6 <__fp_round+0x18>
 4b2:	60 ff       	sbrs	r22, 0
 4b4:	04 c0       	rjmp	.+8      	; 0x4be <__fp_round+0x20>
 4b6:	6f 5f       	subi	r22, 0xFF	; 255
 4b8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ba:	8f 4f       	sbci	r24, 0xFF	; 255
 4bc:	9f 4f       	sbci	r25, 0xFF	; 255
 4be:	08 95       	ret

000004c0 <__fp_split3>:
 4c0:	57 fd       	sbrc	r21, 7
 4c2:	90 58       	subi	r25, 0x80	; 128
 4c4:	44 0f       	add	r20, r20
 4c6:	55 1f       	adc	r21, r21
 4c8:	59 f0       	breq	.+22     	; 0x4e0 <__fp_splitA+0x10>
 4ca:	5f 3f       	cpi	r21, 0xFF	; 255
 4cc:	71 f0       	breq	.+28     	; 0x4ea <__fp_splitA+0x1a>
 4ce:	47 95       	ror	r20

000004d0 <__fp_splitA>:
 4d0:	88 0f       	add	r24, r24
 4d2:	97 fb       	bst	r25, 7
 4d4:	99 1f       	adc	r25, r25
 4d6:	61 f0       	breq	.+24     	; 0x4f0 <__fp_splitA+0x20>
 4d8:	9f 3f       	cpi	r25, 0xFF	; 255
 4da:	79 f0       	breq	.+30     	; 0x4fa <__fp_splitA+0x2a>
 4dc:	87 95       	ror	r24
 4de:	08 95       	ret
 4e0:	12 16       	cp	r1, r18
 4e2:	13 06       	cpc	r1, r19
 4e4:	14 06       	cpc	r1, r20
 4e6:	55 1f       	adc	r21, r21
 4e8:	f2 cf       	rjmp	.-28     	; 0x4ce <__fp_split3+0xe>
 4ea:	46 95       	lsr	r20
 4ec:	f1 df       	rcall	.-30     	; 0x4d0 <__fp_splitA>
 4ee:	08 c0       	rjmp	.+16     	; 0x500 <__fp_splitA+0x30>
 4f0:	16 16       	cp	r1, r22
 4f2:	17 06       	cpc	r1, r23
 4f4:	18 06       	cpc	r1, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	f1 cf       	rjmp	.-30     	; 0x4dc <__fp_splitA+0xc>
 4fa:	86 95       	lsr	r24
 4fc:	71 05       	cpc	r23, r1
 4fe:	61 05       	cpc	r22, r1
 500:	08 94       	sec
 502:	08 95       	ret

00000504 <__fp_zero>:
 504:	e8 94       	clt

00000506 <__fp_szero>:
 506:	bb 27       	eor	r27, r27
 508:	66 27       	eor	r22, r22
 50a:	77 27       	eor	r23, r23
 50c:	cb 01       	movw	r24, r22
 50e:	97 f9       	bld	r25, 7
 510:	08 95       	ret

00000512 <__gesf2>:
 512:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fp_cmp>
 516:	08 f4       	brcc	.+2      	; 0x51a <__gesf2+0x8>
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	08 95       	ret

0000051c <__mulsf3>:
 51c:	0e 94 a1 02 	call	0x542	; 0x542 <__mulsf3x>
 520:	0c 94 4f 02 	jmp	0x49e	; 0x49e <__fp_round>
 524:	0e 94 41 02 	call	0x482	; 0x482 <__fp_pscA>
 528:	38 f0       	brcs	.+14     	; 0x538 <__mulsf3+0x1c>
 52a:	0e 94 48 02 	call	0x490	; 0x490 <__fp_pscB>
 52e:	20 f0       	brcs	.+8      	; 0x538 <__mulsf3+0x1c>
 530:	95 23       	and	r25, r21
 532:	11 f0       	breq	.+4      	; 0x538 <__mulsf3+0x1c>
 534:	0c 94 38 02 	jmp	0x470	; 0x470 <__fp_inf>
 538:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__fp_nan>
 53c:	11 24       	eor	r1, r1
 53e:	0c 94 83 02 	jmp	0x506	; 0x506 <__fp_szero>

00000542 <__mulsf3x>:
 542:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__fp_split3>
 546:	70 f3       	brcs	.-36     	; 0x524 <__mulsf3+0x8>

00000548 <__mulsf3_pse>:
 548:	95 9f       	mul	r25, r21
 54a:	c1 f3       	breq	.-16     	; 0x53c <__mulsf3+0x20>
 54c:	95 0f       	add	r25, r21
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	55 1f       	adc	r21, r21
 552:	62 9f       	mul	r22, r18
 554:	f0 01       	movw	r30, r0
 556:	72 9f       	mul	r23, r18
 558:	bb 27       	eor	r27, r27
 55a:	f0 0d       	add	r31, r0
 55c:	b1 1d       	adc	r27, r1
 55e:	63 9f       	mul	r22, r19
 560:	aa 27       	eor	r26, r26
 562:	f0 0d       	add	r31, r0
 564:	b1 1d       	adc	r27, r1
 566:	aa 1f       	adc	r26, r26
 568:	64 9f       	mul	r22, r20
 56a:	66 27       	eor	r22, r22
 56c:	b0 0d       	add	r27, r0
 56e:	a1 1d       	adc	r26, r1
 570:	66 1f       	adc	r22, r22
 572:	82 9f       	mul	r24, r18
 574:	22 27       	eor	r18, r18
 576:	b0 0d       	add	r27, r0
 578:	a1 1d       	adc	r26, r1
 57a:	62 1f       	adc	r22, r18
 57c:	73 9f       	mul	r23, r19
 57e:	b0 0d       	add	r27, r0
 580:	a1 1d       	adc	r26, r1
 582:	62 1f       	adc	r22, r18
 584:	83 9f       	mul	r24, r19
 586:	a0 0d       	add	r26, r0
 588:	61 1d       	adc	r22, r1
 58a:	22 1f       	adc	r18, r18
 58c:	74 9f       	mul	r23, r20
 58e:	33 27       	eor	r19, r19
 590:	a0 0d       	add	r26, r0
 592:	61 1d       	adc	r22, r1
 594:	23 1f       	adc	r18, r19
 596:	84 9f       	mul	r24, r20
 598:	60 0d       	add	r22, r0
 59a:	21 1d       	adc	r18, r1
 59c:	82 2f       	mov	r24, r18
 59e:	76 2f       	mov	r23, r22
 5a0:	6a 2f       	mov	r22, r26
 5a2:	11 24       	eor	r1, r1
 5a4:	9f 57       	subi	r25, 0x7F	; 127
 5a6:	50 40       	sbci	r21, 0x00	; 0
 5a8:	9a f0       	brmi	.+38     	; 0x5d0 <__mulsf3_pse+0x88>
 5aa:	f1 f0       	breq	.+60     	; 0x5e8 <__mulsf3_pse+0xa0>
 5ac:	88 23       	and	r24, r24
 5ae:	4a f0       	brmi	.+18     	; 0x5c2 <__mulsf3_pse+0x7a>
 5b0:	ee 0f       	add	r30, r30
 5b2:	ff 1f       	adc	r31, r31
 5b4:	bb 1f       	adc	r27, r27
 5b6:	66 1f       	adc	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	88 1f       	adc	r24, r24
 5bc:	91 50       	subi	r25, 0x01	; 1
 5be:	50 40       	sbci	r21, 0x00	; 0
 5c0:	a9 f7       	brne	.-22     	; 0x5ac <__mulsf3_pse+0x64>
 5c2:	9e 3f       	cpi	r25, 0xFE	; 254
 5c4:	51 05       	cpc	r21, r1
 5c6:	80 f0       	brcs	.+32     	; 0x5e8 <__mulsf3_pse+0xa0>
 5c8:	0c 94 38 02 	jmp	0x470	; 0x470 <__fp_inf>
 5cc:	0c 94 83 02 	jmp	0x506	; 0x506 <__fp_szero>
 5d0:	5f 3f       	cpi	r21, 0xFF	; 255
 5d2:	e4 f3       	brlt	.-8      	; 0x5cc <__mulsf3_pse+0x84>
 5d4:	98 3e       	cpi	r25, 0xE8	; 232
 5d6:	d4 f3       	brlt	.-12     	; 0x5cc <__mulsf3_pse+0x84>
 5d8:	86 95       	lsr	r24
 5da:	77 95       	ror	r23
 5dc:	67 95       	ror	r22
 5de:	b7 95       	ror	r27
 5e0:	f7 95       	ror	r31
 5e2:	e7 95       	ror	r30
 5e4:	9f 5f       	subi	r25, 0xFF	; 255
 5e6:	c1 f7       	brne	.-16     	; 0x5d8 <__mulsf3_pse+0x90>
 5e8:	fe 2b       	or	r31, r30
 5ea:	88 0f       	add	r24, r24
 5ec:	91 1d       	adc	r25, r1
 5ee:	96 95       	lsr	r25
 5f0:	87 95       	ror	r24
 5f2:	97 f9       	bld	r25, 7
 5f4:	08 95       	ret

000005f6 <__fp_cmp>:
 5f6:	99 0f       	add	r25, r25
 5f8:	00 08       	sbc	r0, r0
 5fa:	55 0f       	add	r21, r21
 5fc:	aa 0b       	sbc	r26, r26
 5fe:	e0 e8       	ldi	r30, 0x80	; 128
 600:	fe ef       	ldi	r31, 0xFE	; 254
 602:	16 16       	cp	r1, r22
 604:	17 06       	cpc	r1, r23
 606:	e8 07       	cpc	r30, r24
 608:	f9 07       	cpc	r31, r25
 60a:	c0 f0       	brcs	.+48     	; 0x63c <__fp_cmp+0x46>
 60c:	12 16       	cp	r1, r18
 60e:	13 06       	cpc	r1, r19
 610:	e4 07       	cpc	r30, r20
 612:	f5 07       	cpc	r31, r21
 614:	98 f0       	brcs	.+38     	; 0x63c <__fp_cmp+0x46>
 616:	62 1b       	sub	r22, r18
 618:	73 0b       	sbc	r23, r19
 61a:	84 0b       	sbc	r24, r20
 61c:	95 0b       	sbc	r25, r21
 61e:	39 f4       	brne	.+14     	; 0x62e <__fp_cmp+0x38>
 620:	0a 26       	eor	r0, r26
 622:	61 f0       	breq	.+24     	; 0x63c <__fp_cmp+0x46>
 624:	23 2b       	or	r18, r19
 626:	24 2b       	or	r18, r20
 628:	25 2b       	or	r18, r21
 62a:	21 f4       	brne	.+8      	; 0x634 <__fp_cmp+0x3e>
 62c:	08 95       	ret
 62e:	0a 26       	eor	r0, r26
 630:	09 f4       	brne	.+2      	; 0x634 <__fp_cmp+0x3e>
 632:	a1 40       	sbci	r26, 0x01	; 1
 634:	a6 95       	lsr	r26
 636:	8f ef       	ldi	r24, 0xFF	; 255
 638:	81 1d       	adc	r24, r1
 63a:	81 1d       	adc	r24, r1
 63c:	08 95       	ret

0000063e <_exit>:
 63e:	f8 94       	cli

00000640 <__stop_program>:
 640:	ff cf       	rjmp	.-2      	; 0x640 <__stop_program>
